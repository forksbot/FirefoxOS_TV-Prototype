{"version":3,"sources":["../../app/scripts/spatial_navigator.js"],"names":[],"mappings":"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","file":"spatial_navigator.js","sourcesContent":["'use strict';\n/* global evt */\n\n(function(exports) {\n  /**\n   * SpatialNavigator simulates four-direction navigation in Javascript level.\n   *\n   * Navigation is the ability to navigate between focusable elements\n   * within a structured document or user interface according to the spatial\n   * location. Users are assumed navigating among elements on a 2D plane by\n   * arrow keys (up/down/left/right).\n   *\n   * SpatialNavigator keeps a 'focused' element by itself. When navigating,\n   * focus/unfocus events are triggered automatically. Notice the focus is just\n   * an internal state rather than actual focus of DOM Element. User should\n   * add event listeners of those events, and design required behaviors.\n   *\n   * @class SpatialNavigator\n   * @param {Array.<SpatialNavigatorElement>} [collection=[]]\n   *        An initial set of traversable elements.\n   * @param {Object} [config]\n   *        An initial set of configurations.\n   */\n  /**\n   * SpatialNavigatorElement is a navigable element which can be traversed\n   * by {@link SpatialNavigator}. Valid types are as follows:\n   *\n   *  1. a standard HTMLElement.\n   *  2. an Object contains at least 4 properties: left, top, width, and height.\n   *  3. an Object implementing getBoundingRect() which returns an object of 2.\n   *\n   * @typedef {Object} SpatialNavigatorElement\n   */\n  /**\n   * Fired when an element is focused.\n   * @event SpatialNavigator#focus\n   * @property {SpatialNavigatorElement} elem    The element which got focus.\n   */\n  /**\n   * Fired when an element is unfocused.\n   * @event SpatialNavigator#unfocus\n   * @property {SpatialNavigatorElement} elem    The element which lost focus.\n   */\n  function SpatialNavigator(collection, config) {\n    this._focus = null;\n    this._previous = null;\n\n    this.setCollection(collection);\n\n    if (config) {\n      for (var key in config) {\n        this[key] = config[key];\n      }\n    }\n  }\n\n  SpatialNavigator.prototype = evt({\n    /**\n     * Limit the navigating direction to vertical and horizontal only. Targets\n     * in oblique (left-top, right-top, left-bottom, and right-bottom)\n     * directions are always ignored.\n     * @type {Boolean}\n     * @default false\n     * @memberof SpatialNavigator.prototype\n     */\n    straightOnly: false,\n\n    /**\n     * This threshold is used to determine whether an element is considered in\n     * straight (vertical or horizontal) directions. Valid number is between 0\n     * to 1.0. Setting it to 0.3 means an element is counted in the straight\n     * directions if it overlaps the straight area at least 0.3x of width of the\n     * area.\n     * @type {Number}\n     * @default 0.5\n     * @memberof SpatialNavigator.prototype\n     */\n    straightOverlapThreshold: 0.5,\n\n    /**\n     * Ignore elements with style \"display: none\" or \"visibility: hidden\".\n     * @type {Boolean}\n     * @default false\n     * @memberof SpatialNavigator.prototype\n     */\n    ignoreHiddenElement: false,\n\n    /**\n     * The previous focused element has high priority to be chosen as the next\n     * candidate.\n     * @type {Boolean}\n     * @default false\n     * @memberof SpatialNavigator.prototype\n     */\n    rememberSource: false,\n\n    /**\n     * Rect represents position and dimension of a 2D object.\n     * @typedef {Object} Rect\n     * @property {Integer} left     Left position\n     * @property {Integer} top      Top position\n     * @property {Integer} right    Right position\n     * @property {Integer} bottom   Bottom position\n     * @property {Integer} width    Width dimension\n     * @property {Integer} height   Height dimension\n     * @property {Rect}    [center] Center position\n     * @property {Integer} [x]      same as left\n     * @property {Integer} [y]      same as top\n     * @access private\n     * @memberof SpatialNavigator.prototype\n     */\n    /**\n     * Get {@link Rect} of a {@link SpatialNavigatorElement}.\n     *\n     * @param {SpatialNavigatorElement} elem\n     *\n     * @return {Rect} dimension of elem.\n     *\n     * @access private\n     * @memberof SpatialNavigator.prototype\n     */\n    _getRect: function snGetRect(elem) {\n      var rect = null;\n\n      if (this.ignoreHiddenElement && elem instanceof HTMLElement) {\n        var computedStyle = window.getComputedStyle(elem);\n        if (computedStyle.getPropertyValue('visibility') == 'hidden' ||\n            computedStyle.getPropertyValue('display') == 'none') {\n          return null;\n        }\n      }\n\n      if (elem.getBoundingClientRect) {\n        var cr = elem.getBoundingClientRect();\n        rect = {\n          left: cr.left,\n          top: cr.top,\n          width: cr.width,\n          height: cr.height\n        };\n      } else if (elem.left !== undefined) {\n        rect = {\n          left: parseInt(elem.left || 0, 10),\n          top: parseInt(elem.top || 0, 10),\n          width: parseInt(elem.width || 0, 10),\n          height: parseInt(elem.height || 0, 10)\n        };\n      } else {\n        return null;\n      }\n\n      rect.element = elem;\n      rect.right = rect.left + rect.width;\n      rect.bottom = rect.top + rect.height;\n      rect.center = {\n        x: rect.left + Math.floor(rect.width / 2),\n        y: rect.top + Math.floor(rect.height / 2)\n      };\n      rect.center.left = rect.center.right = rect.center.x;\n      rect.center.top = rect.center.bottom = rect.center.y;\n\n      return rect;\n    },\n\n    /**\n     * Get all {@link Rect} objects from the collection.\n     *\n     * @param {SpatialNavigatorElement} [excludedElem]\n     *        You can pass excludedElem here to ignore it from calculating.\n     *        (most likely, the currently focused element is passed).\n     *\n     * @return {Array.<Rect>} {@link Rect} objects of all traversable elements.\n     *\n     * @access private\n     * @memberof SpatialNavigator.prototype\n     */\n    _getAllRects: function snGetAllRects(excludedElem) {\n      var rects = [];\n\n      this._collection.forEach(function(elem) {\n        if (!excludedElem || excludedElem !== elem) {\n          var rect = this._getRect(elem);\n          if (rect) {\n            rects.push(rect);\n          }\n        }\n      }, this);\n\n      return rects;\n    },\n\n    /**\n     * Given a set of {@link Rect} array, divide them into 9 groups with\n     * respect to the position of targetRect. Rects centered inside targetRect\n     * are grouped as 4th group; straight left as 3rd group; straight right as\n     * 5th group; ..... and so on. See below for the corresponding group number:\n     *\n     * <pre>\n     *  |---+---+---|\n     *  | 0 | 1 | 2 |\n     *  |---+---+---|\n     *  | 3 | 4 | 5 |\n     *  |---+---+---|\n     *  | 6 | 7 | 8 |\n     *  |---+---+---|\n     * </pre>\n     *\n     * @param {Array.<Rect>} rects\n     *        {@link RectS} to be divided.\n     * @param {Rect} targetRect\n     *         Reference position for groups.\n     *\n     * @return {Array.Array.<SpatialNavigatorElement>}\n     *         A 9-elements array of array, where rects are categorized into\n     *         these 9 arrays by their group number.\n     *\n     * @access private\n     * @memberof SpatialNavigator.prototype\n     *\n     */\n    _partition: function snDemarcate(rects, targetRect) {\n      var groups = [[], [], [], [], [], [], [], [], []];\n\n      var threshold = this.straightOverlapThreshold;\n      if (threshold > 1 || threshold < 0) {\n        // Fallback to default value\n        threshold = 0.5;\n      }\n\n      rects.forEach(function(rect) {\n        var center = rect.center;\n        var x, y, groupId;\n\n        if (center.x < targetRect.left) {\n          x = 0;\n        } else if (center.x <= targetRect.right) {\n          x = 1;\n        } else {\n          x = 2;\n        }\n\n        if (center.y < targetRect.top) {\n          y = 0;\n        } else if (center.y <= targetRect.bottom) {\n          y = 1;\n        } else {\n          y = 2;\n        }\n\n        groupId = y * 3 + x;\n        groups[groupId].push(rect);\n\n        // Although a rect is in the oblique directions, we categorize it in\n        // the straight area as well if it overlaps the straight directions more\n        // than a specified threshold (0.5 by default).\n        if ([0, 2, 6, 8].indexOf(groupId) !== -1) {\n          if (rect.left <= targetRect.right - targetRect.width * threshold) {\n            if (groupId === 2) {\n              groups[1].push(rect);\n            } else if (groupId === 8) {\n              groups[7].push(rect);\n            }\n          }\n\n          if (rect.right >= targetRect.left + targetRect.width * threshold) {\n            if (groupId === 0) {\n              groups[1].push(rect);\n            } else if (groupId === 6) {\n              groups[7].push(rect);\n            }\n          }\n\n          if (rect.top <= targetRect.bottom - targetRect.height * threshold) {\n            if (groupId === 6) {\n              groups[3].push(rect);\n            } else if (groupId === 8) {\n              groups[5].push(rect);\n            }\n          }\n\n          if (rect.bottom >= targetRect.top + targetRect.height * threshold) {\n            if (groupId === 0) {\n              groups[3].push(rect);\n            } else if (groupId === 2) {\n              groups[5].push(rect);\n            }\n          }\n        }\n      });\n\n      return groups;\n    },\n\n    /**\n     * Bind targetRect to a set of distance functions for ranking. These\n     * functions work with another {@link Rect} object passed to get a ranking\n     * value relative to targetRect.\n     *\n     * @param {Rect} targetRect\n     *\n     * @return {Object.<function>}\n     *         An object containing a bunch of functions bound with targetRect.\n     *\n     * @access private\n     * @memberof SpatialNavigator.prototype\n     */\n    _getDistanceFunction: function snGetDistanceFunction(targetRect) {\n      return {\n        /* Plumb Line: a vertical line through the center of the\n           targetRect. */\n        nearPlumbLineIsBetter: function(rect) {\n          var d;\n          if (rect.center.x < targetRect.center.x) {\n            d = targetRect.center.x - rect.right;\n          } else {\n            d = rect.left - targetRect.center.x;\n          }\n          return d < 0 ? 0 : d;\n        },\n\n        /* Horizon: a horizontal line through the center of the\n           \"targetRect\". */\n        nearHorizonIsBetter: function(rect) {\n          var d;\n          if (rect.center.y < targetRect.center.y) {\n            d = targetRect.center.y - rect.bottom;\n          } else {\n            d = rect.top - targetRect.center.y;\n          }\n          return d < 0 ? 0 : d;\n        },\n\n        /* Target Left: a coincident line of the left edge of the\n           \"targetRect\". */\n        nearTargetLeftIsBetter: function(rect) {\n          var d;\n          if (rect.center.x < targetRect.center.x) {\n            d = targetRect.left - rect.right;\n          } else {\n            d = rect.left - targetRect.left;\n          }\n          return d < 0 ? 0 : d;\n        },\n\n        /* Target Top: a coincident line of the top edge of the\n           \"targetRect\". */\n        nearTargetTopIsBetter: function(rect) {\n          var d;\n          if (rect.center.y < targetRect.center.y) {\n            d = targetRect.top - rect.bottom;\n          } else {\n            d = rect.top - targetRect.top;\n          }\n          return d < 0 ? 0 : d;\n        },\n\n        /* top, bottom, left, and right: Just ranking by absolute coordinate\n           without respect to targetRect. Usually they are used as fallback\n           rules when ranks above are draw. */\n        topIsBetter: function(rect) {\n          return rect.top;\n        },\n        bottomIsBetter: function(rect) {\n          return -1 * rect.bottom;\n        },\n        leftIsBetter: function(rect) {\n          return rect.left;\n        },\n        rightIsBetter: function(rect) {\n          return -1 * rect.right;\n        }\n      };\n    },\n\n    /**\n     * PrioritySet contains a set of elements with distance functions that\n     * should be used to rank them (obtained from {@link\n     * SpatialNavigator#_getDistanceFunction}).\n     *\n     * @typedef PrioritySet\n     * @property {Array.<Rects>} group\n     *           {@link Rects} of elements that need to be prioritized.\n     * @property {Array.<function>} distance\n     *           Distance functions. Primary ranking rule should be put in index\n     *           0; secondary in index 1 (fallback rule when primary rule draws\n     *           ); and so on.\n     * @access private\n     * @memberof SpatialNavigator.prototype\n     */\n    /**\n     * Pick a {@link Rect} with highest priority.\n     *\n     * @param {Array.<PrioritySet>} priorities\n     *        An array of {@link PrioritySet} that need to be prioritized. The\n     *        set with lowest index containing non-empty {PrioritySet.group}\n     *        would be prioritized.\n     * @param {SpatialNavigatorElement} target\n     *        The origin of coordinates for traversal.\n     * @param {String} direction\n     *        It should be \"left\", \"right\", \"up\" or \"down\".\n     *\n     * @return {Rect} the {@link Rect} of highest priority.\n     *\n     * @access private\n     * @memberof SpatialNavigator.prototype\n     */\n    _prioritize: function snPrioritize(priorities, target, direction) {\n      var destPriority = priorities.find(function(p) {\n        return !!p.group.length;\n      });\n\n      if (!destPriority) {\n        return null;\n      }\n\n      if (this.rememberSource &&\n          this._previous &&\n          target == this._previous.destination &&\n          direction == this._previous.reverse) {\n\n        var source = this._previous.source;\n        var found = destPriority.group.find(function(dest) {\n          return dest.element == source;\n        });\n        if (found) {\n          return found;\n        }\n      }\n\n      destPriority.group.sort(function(a, b) {\n        return destPriority.distance.reduce(function(answer, distance) {\n          return answer || (distance(a) - distance(b));\n        }, 0);\n      });\n\n      return destPriority.group[0];\n    },\n\n    /**\n     * Replace the set of traversable elements.\n     *\n     * @param  {Array.<SpatialNavigatorElement>} [collection=[]]\n               elements to be replaced. The array is deep-copied and never\n               be changed directly by SpatialNavigator.\n     *\n     * @fires SpatialNavigator#unfocus\n     * @memberof SpatialNavigator.prototype\n     */\n    setCollection: function snSetCollection(collection) {\n      this.unfocus();\n      this._collection = [];\n      if (collection) {\n        this.multiAdd(collection);\n      }\n    },\n\n    /**\n     * Add an element to traversable set.\n     *\n     * @param  {SpatialNavigatorElement} elem\n     * @return {Boolean} true if succeed.\n     *\n     * @memberof SpatialNavigator.prototype\n     */\n    add: function snAdd(elem) {\n      var index = this._collection.indexOf(elem);\n      if (index >= 0) {\n        return false;\n      }\n      this._collection.push(elem);\n      return true;\n    },\n\n    /**\n     * Add a bunch of elements to traversable set.\n     *\n     * @param  {Array.<SpatialNavigatorElement>} elements\n     * @return {Boolean} true if all elements are added successfully.\n     *\n     * @memberof SpatialNavigator.prototype\n     */\n    multiAdd: function snMultiAdd(elements) {\n      return Array.from(elements).every(this.add, this);\n    },\n\n    /**\n     * Remove an element from traversable set.\n     *\n     * @param {SpatialNavigatorElement} elem\n     * @return {Boolean} true if succeed. false if elem does not exist.\n     *\n     * @fires SpatialNavigator#unfocus\n     * @memberof SpatialNavigator.prototype\n     */\n    remove: function snRemove(elem) {\n      var index = this._collection.indexOf(elem);\n      if (index < 0) {\n        return false;\n      }\n\n      if (this._focus === elem) {\n        this.unfocus();\n      }\n\n      this._collection.splice(index, 1);\n      return true;\n    },\n\n    /**\n     * Remove a bunch of elements to traversable set.\n     *\n     * @param  {Array.<SpatialNavigatorElement>} elements\n     * @return {Boolean} true if all elements are removed successfully.\n     *\n     * @memberof SpatialNavigator.prototype\n     */\n    multiRemove: function snMultiRemove(elements) {\n      return Array.from(elements).every(this.remove, this);\n    },\n\n    /**\n     * Move focus to an existing element.\n     *\n     * @param  {SpatialNavigatorElement} [elem]\n     *         when omitted, it focused the first element.\n     *\n     * @return {Boolean} true if succeed. false if element doesn't exist.\n     *\n     * @fires SpatialNavigator#focus\n     * @fires SpatialNavigator#unfocus\n     * @memberof SpatialNavigator.prototype\n     */\n    focus: function snFocus(elem) {\n      if (typeof elem === 'undefined') {\n        elem = this._focus;\n      }\n\n      if (this.focusSilently(elem)) {\n        this.fire('focus', this._focus);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    /**\n     * Move focus to an existing element but without firing any events. Can be\n     * used on initializing.\n     *\n     * @param  {SpatialNavigatorElement} [elem]\n     *         when omitted, it focused the first element.\n     *\n     * @return {Boolean} true if succeed. false if element doesn't exist.\n     *\n     * @memberof SpatialNavigator.prototype\n     */\n    focusSilently: function snFocusSliently(elem) {\n      if (!this._collection) {\n        return false;\n      }\n\n      if (!elem) {\n        elem = this._collection[0];\n      } else if (this._collection.indexOf(elem) < 0) {\n        return false;\n      }\n\n      this.unfocus();\n      this._focus = elem;\n      return true;\n    },\n\n    /**\n     * Remove focus if any.\n     *\n     * It will trigger \"unfocus\" event.\n     *\n     * @return {Boolean} succeed or not.\n     *\n     * @fires SpatialNavigator#unfocus\n     * @memberof SpatialNavigator.prototype\n     */\n    unfocus: function snUnfocus() {\n      if (this._focus) {\n        var elem = this._focus;\n        this._focus = null;\n        this.fire('unfocus', elem);\n      }\n      return true;\n    },\n\n    /**\n     * Get the currently focused element.\n     *\n     * @return {SpatialNavigatorElement} or null if nothing focused.\n     *\n     * @memberof SpatialNavigator.prototype\n     */\n    getFocusedElement: function snGetFocusedElement() {\n      return this._focus;\n    },\n\n    /**\n     * Given a direction, find the element nearest to the focus element in that\n     * direction. This is equivalent to {@link SpatialNavigator#navigate} with\n     * focused element passed as target.\n     *\n     * @param {String} direction\n     *        It should be \"left\", \"right\", \"up\" or \"down\".\n     *\n     * @return {Boolean} true if succeed, false if nothing can be focused.\n     *\n     * @memberof SpatialNavigator.prototype\n     */\n    move: function snMove(direction) {\n      var reverse = {\n          'left': 'right',\n          'up': 'down',\n          'right': 'left',\n          'down': 'up'\n      };\n\n      if (!this._focus) {\n        this._previous = null;\n        this.focus();\n      } else {\n        var elem = this.navigate(this._focus, direction);\n        if (!elem) {\n          return false;\n        }\n        if (this.rememberSource) {\n          this._previous = {\n            source: this._focus,\n            destination: elem,\n            reverse: reverse[direction.toLowerCase()]\n          };\n        }\n        this.unfocus();\n        this.focus(elem);\n      }\n      return true;\n    },\n\n    /**\n     * Given a direction, find an element nearest to the target element in that\n     * direction.\n     *\n     * @param {SpatialNavigatorElement} target\n     *        The origin of coordinates for traversal.\n     * @param {String} direction\n     *        It should be \"left\", \"right\", \"up\" or \"down\".\n     *\n     * @return {SpatialNavigatorElement}\n     *         The destination of the element which has the highest priority.\n     *\n     * @memberof SpatialNavigator.prototype\n     */\n    navigate: function snNavigate(target, direction) {\n      if (!target || !direction || !this._collection) {\n        return null;\n      }\n\n      direction = direction.toLowerCase();\n\n      var rects = this._getAllRects(target);\n      var targetRect = this._getRect(target);\n      if (!targetRect || !rects.length) {\n        return null;\n      }\n\n      /* Get distance functions for ranking priorities relative to targetRect */\n      var distanceFunction = this._getDistanceFunction(targetRect);\n\n      /* Candidate {@link Rect}s are divided into nine regions based on its\n         position with respect to targetRect. */\n      var groups = this._partition(rects, targetRect);\n\n      /* {@link Rect}s in group 4 overlaps with targetRect. We distribute them\n         further into 9 regions based on its position with respect to the\n         center point of targetRect. */\n      var internalGroups = this._partition(groups[4], targetRect.center);\n\n      /* priorities: This big array carrys candidate elements with related\n       * distance functions by appropriate priority we want. Depenging on the\n       * direction, 3 kinds of elements are added separately in the following\n       * order:\n       *\n       *   - 1st: candidates centered inside targetRect (group 4)\n       *          (so we pick up corresponding internalGroups).\n       *   - 2nd: in groups of straight direction (group 1, 3, 5, 7).\n       *   - 3rd: in groups of oblique direction (group 0, 2, 6, 8).\n       *\n       * For each kind of element above, ranking is performed by the following\n       * rules (distance functions) in order:\n       *\n       *   - 1st: distance between candidate and target.\n       *   - 2nd: absolute coordinate of candidates.\n       *   - 3rd: distance of left or top coordinate between candidate and\n       *          target (for oblique direction only)\n       *\n       * The switch...case block below is just to construct this array.\n       * We just pick the required order into array here, then call\n       * {SpatialNavigator#_prioritize} to do the trick.\n       */\n      var priorities;\n\n      switch (direction) {\n        case 'left':\n          priorities = [\n            {\n              group: internalGroups[0].concat(internalGroups[3])\n                                       .concat(internalGroups[6]),\n              distance: [\n                distanceFunction.nearPlumbLineIsBetter,\n                distanceFunction.topIsBetter\n              ]\n            },\n            {\n              group: groups[3],\n              distance: [\n                distanceFunction.nearPlumbLineIsBetter,\n                distanceFunction.topIsBetter\n              ]\n            },\n            {\n              group: groups[0].concat(groups[6]),\n              distance: [\n                distanceFunction.nearHorizonIsBetter,\n                distanceFunction.rightIsBetter,\n                distanceFunction.nearTargetTopIsBetter\n              ]\n            }\n          ];\n          break;\n        case 'right':\n          priorities = [\n            {\n              group: internalGroups[2].concat(internalGroups[5])\n                                       .concat(internalGroups[8]),\n              distance: [\n                distanceFunction.nearPlumbLineIsBetter,\n                distanceFunction.topIsBetter\n              ]\n            },\n            {\n              group: groups[5],\n              distance: [\n                distanceFunction.nearPlumbLineIsBetter,\n                distanceFunction.topIsBetter\n              ]\n            },\n            {\n              group: groups[2].concat(groups[8]),\n              distance: [\n                distanceFunction.nearHorizonIsBetter,\n                distanceFunction.leftIsBetter,\n                distanceFunction.nearTargetTopIsBetter\n              ]\n            }\n          ];\n          break;\n        case 'up':\n          priorities = [\n            {\n              group: internalGroups[0].concat(internalGroups[1])\n                                       .concat(internalGroups[2]),\n              distance: [\n                distanceFunction.nearHorizonIsBetter,\n                distanceFunction.leftIsBetter\n              ]\n            },\n            {\n              group: groups[1],\n              distance: [\n                distanceFunction.nearHorizonIsBetter,\n                distanceFunction.leftIsBetter\n              ]\n            },\n            {\n              group: groups[0].concat(groups[2]),\n              distance: [\n                distanceFunction.nearPlumbLineIsBetter,\n                distanceFunction.bottomIsBetter,\n                distanceFunction.nearTargetLeftIsBetter\n              ]\n            }\n          ];\n          break;\n        case 'down':\n          priorities = [\n            {\n              group: internalGroups[6].concat(internalGroups[7])\n                                       .concat(internalGroups[8]),\n              distance: [\n                distanceFunction.nearHorizonIsBetter,\n                distanceFunction.leftIsBetter\n              ]\n            },\n            {\n              group: groups[7],\n              distance: [\n                distanceFunction.nearHorizonIsBetter,\n                distanceFunction.leftIsBetter\n              ]\n            },\n            {\n              group: groups[6].concat(groups[8]),\n              distance: [\n                distanceFunction.nearPlumbLineIsBetter,\n                distanceFunction.topIsBetter,\n                distanceFunction.nearTargetLeftIsBetter\n              ]\n            }\n          ];\n          break;\n        default:\n          return null;\n      }\n\n      if (this.straightOnly) {\n        // Ignore candidates in oblique direction.\n        priorities.pop();\n      }\n\n      var dest = this._prioritize(priorities, target, direction);\n      if (!dest) {\n        return null;\n      }\n\n      return dest.element;\n    }\n  });\n\n  exports.SpatialNavigator = SpatialNavigator;\n})(window);\n"]}