{"version":3,"sources":["../../app/scripts/message_handler.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;AAIb,CAAC,UAAS,OAAO,EAAE;;;;;;;;;;;;AAYjB,MAAI,cAAc,GAAG,SAAjB,cAAc,GAAc;AAC9B,QAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACpB,QAAI,CAAC,aAAa,GAAG,EAAE,CAAC;GACzB,CAAC;;AAEF,gBAAc,CAAC,SAAS,GAAG;AACzB,sBAAkB,EAAE,SAAS;;AAE7B,SAAK,EAAE,SAAS;;;;;;;AAOhB,QAAI,EAAE,SAAS,OAAO,CAAC,IAAI,EAAE;AAC3B,UAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AAClB,eAAS,CAAC,oBAAoB,CACA,UAAU,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAC1E,UAAI,CAAC,kBAAkB,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAClD,UAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;AACtD,UAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KAC5D;;;;;;;;;;;;;;;;AAgBD,OAAG,EAAE,SAAS,MAAM,CAAC,SAAS,EAAE;AAC9B,UAAI,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC;AAChC,iBAAS,EAAE,SAAS;OACrB,CAAC,CAAC;KACJ;;;;;;;;;;AAUD,SAAK,EAAE,SAAS,QAAQ,CAAC,IAAI,EAAE;AAC7B,UAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;;;;;AAKtB,UAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;AACvD,UAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KACnC;;AAED,kBAAc,EAAE,SAAS,iBAAiB,CAAC,QAAQ,EAAE;AACnD,UAAG,IAAI,CAAC,MAAM,EAAE;AACd,YAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAClC,eAAO;OACR;AACD,UAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;KAChC;;;;;;;;;AASD,gBAAY,EAAE,SAAS,eAAe,GAAG;AACvC,UAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACpB;;AAED,mBAAe,EAAE,yBAAS,QAAQ,EAAE;AAClC,UAAI,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;AAChC,cAAO,IAAI;AACT,aAAK,KAAK;AACR,cAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/B,gBAAM;AAAA,OACT;KACF;;;;;;;;;AASD,kBAAc,EAAE,SAAS,iBAAiB,GAAG;AAC3C,UAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACpB,UAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;AACnC,eAAO,KAAK,CAAC;OACd;;AAED,UAAI,QAAQ,CAAC;AACb,aAAM,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;AACnC,gBAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;AACpC,YAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;OAChC;AACD,aAAO,IAAI,CAAC;KACb;GACF,CAAC;;AAEF,SAAO,CAAC,cAAc,GAAG,cAAc,CAAC;CACzC,CAAA,CAAE,MAAM,CAAC,CAAC","file":"message_handler.js","sourcesContent":["'use strict';\n\n/* global ConnectionManager */\n\n(function(exports) {\n\n  /**\n   * MessageHandler handles all incoming messages which includes both\n   * [IAC](http://mzl.la/1TKR6zw) and [MozActivity](http://mzl.la/1Pu8ecc).\n   * This class relies on {@link ConnectionManager} to monitor incoming `unpin`\n   * message on [IAC](http://mzl.la/1TKR6zw).\n   *\n   * @class MessageHandler\n   * @requires {@link ConnectionManager}\n   * @requires {@link Home}\n   */\n  var MessageHandler = function() {\n    this.isStop = false;\n    this.activityQueue = [];\n  };\n\n  MessageHandler.prototype = {\n    _connectionManager: undefined,\n\n    _home: undefined,\n\n    /**\n     * Initialize MessageHandler\n     * @public\n     * @method  MessageHandler#init\n     */\n    init: function cm_init(home) {\n      this._home = home;\n      navigator.mozSetMessageHandler(\n                                    'activity', this.handleActivity.bind(this));\n      this._connectionManager = new ConnectionManager();\n      this._connectionManager.init(['iac-appdeck-channel']);\n      this._connectionManager.on('unpin', this.unpin.bind(this));\n    },\n\n    /**\n     * Pin card of `cardEntry`\n     * @public\n     * @method  MessageHandler#pin\n     * @param {Object} cardEntry - cardEntry representing the card\n     * @param {String} cardEntry.type - valid values are 'Application', 'Deck',\n     *                                and 'Folder'\n     * @param {String} cardEntry.group - valud values are 'tv', 'application',\n     *                                 'device', and 'dashboard'\n     * @param {String} cardEntry.manifestURL - manifestURL, if the card\n     *                                       represent an app or a deck\n     * @param {String} cardEntry.launchURL - optional\n     * @param {Blob} cardEntry.thumnail - see [blob](http://mzl.la/1BRI7IV)\n     */\n    pin: function mh_pin(cardEntry) {\n      this._home.cardManager.insertCard({\n        cardEntry: cardEntry\n      });\n    },\n\n    /**\n     * Unpin card\n     * @public\n     * @method  MessageHandler#unpin\n     * @param  {Object} data\n     * @param  {String} data.manifestURL - manifestURL of the unpinned app\n     * @param  {String} data.launchURL - optional\n     */\n    unpin: function mh_unpin(data) {\n      var home = this._home;\n      // XXX: this is extra step, we should remove this step once we were\n      // done fixing and refactoring cardManager.removeCard.\n      // The reason we need this step here is because cardManager.removeCard\n      // only accept card instance as sole parameter.\n      var card = home.cardManager.findCardFromCardList(data);\n      home.cardManager.removeCard(card);\n    },\n\n    handleActivity: function mh_handleActivity(activity) {\n      if(this.isStop) {\n        this.activityQueue.push(activity);\n        return;\n      }\n      this._digestActivity(activity);\n    },\n\n    /**\n     * Stop from processing activity in activityQueue. The reason we need this\n     * is that we don't need to do pinning when smart-home is not visible.\n     *\n     * @public\n     * @method  MessageHandler#stopActivity\n     */\n    stopActivity: function mh_stopActivity() {\n      this.isStop = true;\n    },\n\n    _digestActivity: function(activity) {\n      var name = activity.source.name;\n      switch(name) {\n        case 'pin':\n          this.pin(activity.source.data);\n          break;\n      }\n    },\n\n    /**\n     * Resume processing activity in activityQueue. We could call this method to\n     * continue processing pinning when smart-home is visible.\n     *\n     * @public\n     * @method  MessageHandler#resumeActivity\n     */\n    resumeActivity: function mh_resumeActivity() {\n      this.isStop = false;\n      if (this.activityQueue.length === 0) {\n        return false;\n      }\n\n      var activity;\n      while(this.activityQueue.length > 0) {\n        activity = this.activityQueue.pop();\n        this._digestActivity(activity);\n      }\n      return true;\n    }\n  };\n\n  exports.MessageHandler = MessageHandler;\n})(window);\n"]}